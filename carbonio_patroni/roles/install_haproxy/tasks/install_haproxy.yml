---
- name: Update repos [Ubuntu]
  become: true
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian" and inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
      - haproxy

- name: Install haproxy packages [Ubuntu]
  become: true
  apt: name={{ item }} state=present
  with_items:
    - "{{ haproxy_packages }}"
  when: ansible_os_family == "Debian" and inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
    - haproxy

- name: Install haproxy packages [RHEL]
  become: true
  yum: name={{ item }} state=present
  with_items:
    - "{{ haproxy_packages }}"
  when: ansible_os_family == "RedHat" and inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
    - haproxy

- name: Template configuration file for haproxy
  become: true
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  when: inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
    - haproxy

- name: Check if pgpool is installed [Ubuntu]
  become: true
  shell: apt list --installed 2>/dev/null | grep -w '^pgpool2'
  register: pgpool_check_debian
  failed_when: false
  changed_when: false
  when: ansible_os_family == "Debian" and inventory_hostname in groups['dbsConnectorServers']
  tags:
    - haproxy

- name: Disable pgpool service if installed [Ubuntu]
  become: true
  systemd:
    name: pgpool2
    enabled: false
    state: stopped
  when:
    - ansible_os_family == "Debian" and inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool2' in pgpool_check_debian.stdout"
  tags:
    - haproxy

- name: Uninstall pgpool package if installed [Ubuntu]
  become: true
  apt:
    name: pgpool2
    state: absent
    purge: true
  when:
    - ansible_os_family == "Debian" and inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool2' in pgpool_check_debian.stdout"
  tags:
    - haproxy

- name: Reset failed services [Ubuntu]
  shell:
    cmd: 'systemctl reset-failed'
    executable: /bin/bash
  when:
    - ansible_os_family == "Debian"
    - inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool2' in pgpool_check_debian.stdout"
  tags:
    - haproxy

- name: Check if pgpool is installed [RHEL]
  become: true
  shell: rpm -qa 2>/dev/null | grep -w '^pgpool-II'
  register: pgpool_check_rhel
  failed_when: false
  changed_when: false
  when: ansible_os_family == "RedHat" and inventory_hostname in groups['dbsConnectorServers']
  tags:
    - haproxy

- name: Disable pgpool service if installed [RHEL]
  become: true
  systemd:
    name: pgpool-II
    enabled: false
    state: stopped
  when:
    - ansible_os_family == "RedHat" and inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool-II' in pgpool_check_rhel.stdout"
  tags:
    - haproxy

- name: Uninstall pgpool package if installed [RHEL
  become: true
  yum:
    name: pgpool-II
    state: absent
  when:
    - ansible_os_family == "RedHat" and inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool-II' in pgpool_check_rhel.stdout"
  tags:
    - haproxy

- name: Remove pgpool configuration files [RHEL]
  become: true
  file:
    path: /etc/pgpool-II
    state: absent
  when:
    - ansible_os_family == "RedHat"  and inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool-II' in pgpool_check_rhel.stdout"
  tags:
    - haproxy

- name: Reset failed services [RHEL]
  shell:
    cmd: 'systemctl reset-failed'
    executable: /bin/bash
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in groups['dbsConnectorServers']
    - "'pgpool-II' in pgpool_check_rhel.stdout"
  tags:
    - haproxy

- name: Start the haproxy service
  ansible.builtin.service:
    name: haproxy
    state: restarted
    enabled: yes
  when: inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
    - haproxy

- name: Use haproxy for LDAP connection
  become: true
  become_method: su
  become_user: zextras
  command: "/opt/zextras/bin/zmlocalconfig -e {{ item }}"
  loop:
    - "ldap_url='ldap://localhost:389'"
    - "ldap_master_url='ldap://localhost:389'"
  when: inventory_hostname not in groups["masterDirectoryServers"] and inventory_hostname not in groups["replicaDirectoryServers"]
  tags:
    - haproxy

- name: Restart carbonio
  become: true
  become_method: su
  become_user: zextras
  command: "/opt/zextras/bin/zmcontrol restart"
  when: inventory_hostname in groups["applicationServers"]
  tags:
    - haproxy